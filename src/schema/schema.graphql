extend type Product {
  sku: String
  isFeatured: String
  featuredImage: String
  Category: String
  Attributes: [ProductAttributes]
  oldId: Int
  Images: String
  Parent: String
  regularPrice: Int
  isDeal: Boolean
  Drinks: [ProductAttributes]
  hashtags: [String]
}
type ProductAttributes {
  name: String
  value: String
  key: String
  isDeal: Boolean
}
extend type ProductVariant {
  sku: String
  isFeatured: String
  featuredImage: String
  Category: String
  Attributes: [ProductAttributes]
  Drinks: [ProductAttributes]
  oldId: Int
  Images: [String]
  Parent: String
  regularPrice: Int
  isDeal: Boolean
}

extend type CatalogProduct {
  isDeal: Boolean
  sku: String
  isFeatured: String
  featuredImage: String
  Category: String
  Attributes: [ProductAttributes]
  Drinks: [ProductAttributes]
  oldId: Int
  Images: [String]
  Parent: String
  regularPrice: Int
}
extend type CatalogProductVariant {
  isDeal: Boolean
  sku: String
  isFeatured: String
  featuredImage: String
  Category: String
  Attributes: [ProductAttributes]
  Drinks: [ProductAttributes]
  oldId: Int
  Images: [String]
  Parent: String
  regularPrice: Int
}
extend input ProductInput {
  sku: String
  isFeatured: String
  featuredImage: String
  Category: String
  Attributes: [AttributesInput]
  Drinks: [AttributesInput]
  oldId: Int
  Images: [String]
  Parent: String
  regularPrice: Int
  isDeal: Boolean
  hashtags: [String]
}
extend input ProductVariantInput {
  isDeal: Boolean
  sku: String
  isFeatured: String
  featuredImage: String
  Category: String
  Attributes: [AttributesInput]
  Drinks: [AttributesInput]
  oldId: Int
  Images: [String]
  Parent: String
  regularPrice: Int
}

input AttributesInput {
  key: String
  name: String
  value: String
}
type Images {
  imageLink: String
}
input ImagesInput {
  imageLink: String
}
input updateAny2DealVariantsInput {
  id: ID
}
input updateTrioFeastDealVariantsInput {
  id: ID
}
input createProductVariantScriptInput {
  shopId: ID
  productId: String
}
input updateProductScriptInput {
  shopId: ID
  productId: String
}
input UpdateProductVariantInput {
  shopId: ID
  productId: String
}
type appSettingDetailsPayload {
  startDate: String
  startTime: String
  endDate: String
  endTime: String
  slideLineDetail: String
}

input createContentDataInput {
  contentData: String
  startTime: String
  endTime: String
}
extend type Mutation {
  createProductVariantScript(
    #   "Mutation input"
    input: createProductVariantScriptInput
  ): Boolean
  updateProductVariantScript(
    #   "Mutation input"
    input: UpdateProductVariantInput
  ): Boolean
  updateProductScript(input: updateProductScriptInput): Boolean
  updateAny2DealVariants(input: updateAny2DealVariantsInput): Boolean
  updateTrioFeastDealVariants(input: updateTrioFeastDealVariantsInput): Boolean
  createAny2Deal(input: createProductVariantScriptInput): Boolean
  createContentData(input: createContentDataInput): Boolean
}
extend type Query {
  appSettingDetails: appSettingDetailsPayload
}
